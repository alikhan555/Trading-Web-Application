@model RapidWeb.Models.Service
@{
    ViewBag.Title = "New Service";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="col-xl-12 order-xl-1">
    <div class="card bg-secondary shadow">
        <div class="card-header bg-white border-0">
            <div class="row align-items-center">
                <div class="col-8">
                    <h3 class="mb-0">@ViewBag.Title</h3>
                </div>
                <div class="col-4">
                    <a class="float-right btn btn-primary btn-sm" href="@Url.Action("Index")">Back To List</a>
                </div>
            </div>
        </div>

        <div class="card-body">

            @using (Html.BeginForm("Create", "Service", FormMethod.Post, new { autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-sm-6 col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(U => U.PackageType, new { @class = "form-control-label" })
                            @Html.TextBoxFor(U => U.PackageType, new { @class = "form-control form-control-alternative" })
                            @Html.ValidationMessageFor(U => U.PackageType, "", new { @class = "invalid-feedback", @style = "display:block" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6 col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(U => U.Description, new { @class = "form-control-label" })
                            @Html.TextBoxFor(U => U.Description, new { @class = "form-control form-control-alternative" })
                            @Html.ValidationMessageFor(U => U.Description, "", new { @class = "invalid-feedback", @style = "display:block" })
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(U => U.PackageDetails, new { @class = "form-control-label" })
                            @Html.TextBoxFor(U => U.PackageDetails, new { @class = "form-control form-control-alternative" })
                            @Html.ValidationMessageFor(U => U.PackageDetails, "", new { @class = "invalid-feedback", @style = "display:block" })
                        </div>
                    </div>
                </div>

                <h3 id="alternative">Nature</h3>
                <div class="row">
                    <div class="col-sm-6 col-md-4">
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Maintenance, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Maintenance, new { @class = "custom-control-label" })
                        </div>
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Installation, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Installation, new { @class = "custom-control-label" })
                        </div>
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Development, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Development, new { @class = "custom-control-label" })
                        </div>
                    </div>

                    <div class="col-sm-6 col-md-4">
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Troubleshooting, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Troubleshooting, new { @class = "custom-control-label" })
                        </div>
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Networking, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Networking, new { @class = "custom-control-label" })
                        </div>
                        <div class="custom-control custom-control-alternative custom-checkbox mb-3">
                            @Html.CheckBoxFor(U => U.Other, new { @class = "custom-control-input" })
                            @Html.LabelFor(U => U.Other, new { @class = "custom-control-label" })
                        </div>
                    </div>
                </div>

                if (!ViewData.ModelState.IsValid && ViewData.ModelState[string.Empty] != null)
                {
                    foreach (var error in @ViewData.ModelState[string.Empty]?.Errors)
                    {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <span>@error.ErrorMessage</span>
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                    }
                }

                <div class="row">
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-success" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
