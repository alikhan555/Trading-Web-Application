@model RapidWeb.ViewModel.ChangePasswordViewModel
@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="col-xl-12 order-xl-1">
    <div class="card bg-secondary shadow">
        <div class="card-header bg-white border-0">
            <div class="row align-items-center">
                <div class="col-8">
                    <h3 class="mb-0">@ViewBag.Title</h3>
                </div>
            </div>
        </div>

        <div class="card-body">

            @using (Html.BeginForm("ChangePassword", "User", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                @Html.HiddenFor(x => x.UserId)

                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(U => U.CurrentPassword, new { @class = "form-control-label" })
                        @Html.PasswordFor(U => U.CurrentPassword, new { @class = "form-control form-control-alternative" })
                        @Html.ValidationMessageFor(U => U.CurrentPassword, "", new { @class = "invalid-feedback", @style = "display:block" })
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(U => U.NewPassword, new { @class = "form-control-label" })
                        @Html.PasswordFor(U => U.NewPassword, new { @class = "form-control form-control-alternative" })
                        @Html.ValidationMessageFor(U => U.NewPassword, "", new { @class = "invalid-feedback", @style = "display:block" })
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(U => U.ConfirmNewPassword, new { @class = "form-control-label" })
                        @Html.PasswordFor(U => U.ConfirmNewPassword, new { @class = "form-control form-control-alternative" })
                        @Html.ValidationMessageFor(U => U.ConfirmNewPassword, "", new { @class = "invalid-feedback", @style = "display:block" })
                    </div>
                </div>

                if (!ViewData.ModelState.IsValid && ViewData.ModelState[string.Empty] != null)
                {
                    foreach (var error in @ViewData.ModelState[string.Empty]?.Errors)
                    {
                        <div class="col-sm-4 ">
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <span>@error.ErrorMessage</span>
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                        </div>
                    }
                }

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Update" class="btn btn-success" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
